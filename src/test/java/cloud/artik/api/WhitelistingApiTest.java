/*
 * ARTIK Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cloud.artik.api;

import cloud.artik.client.ApiException;
import cloud.artik.model.CertificateEnvelope;
import cloud.artik.model.DeviceTypeUpdateInput;
import cloud.artik.model.RejectedCSVRowsEnvelope;
import cloud.artik.model.UploadIdEnvelope;
import cloud.artik.model.UploadStatusEnvelope;
import cloud.artik.model.WhitelistEnvelope;
import cloud.artik.model.WhitelistResultEnvelope;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WhitelistingApi
 */
@Ignore
public class WhitelistingApiTest {

    private final WhitelistingApi api = new WhitelistingApi();

    
    /**
     * Delete a vdid from the devicetype whitelist.
     *
     * Delete a vdid from the devicetype whitelist.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteVdidTest() throws ApiException {
        String dtid = null;
        String vdid = null;
        WhitelistEnvelope response = api.deleteVdid(dtid, vdid);

        // TODO: test validations
    }
    
    /**
     * Delete a whitelist certificate associated with a devicetype.
     *
     * Delete a whitelist certificate associated with a devicetype.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWhitelistCertificateTest() throws ApiException {
        String dtid = null;
        String cid = null;
        WhitelistEnvelope response = api.deleteWhitelistCertificate(dtid, cid);

        // TODO: test validations
    }
    
    /**
     * Enable or disble whitelist feature of a device type
     *
     * Enable or disble whitelist feature of a device type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableWhitelistTest() throws ApiException {
        String dtid = null;
        DeviceTypeUpdateInput deviceTypeUpdateInfo = null;
        WhitelistEnvelope response = api.enableWhitelist(dtid, deviceTypeUpdateInfo);

        // TODO: test validations
    }
    
    /**
     * Get the list of rejected rows for an uploaded CSV file.
     *
     * Get the list of rejected rows for an uploaded CSV file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRejectedRowListTest() throws ApiException {
        String dtid = null;
        String uploadId = null;
        Integer count = null;
        Integer offset = null;
        RejectedCSVRowsEnvelope response = api.getRejectedRowList(dtid, uploadId, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get the status of a uploaded CSV file.
     *
     * Get the status of a uploaded CSV file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUploadStatusTest() throws ApiException {
        String dtid = null;
        String uploadId = null;
        UploadStatusEnvelope response = api.getUploadStatus(dtid, uploadId);

        // TODO: test validations
    }
    
    /**
     * Get whitelisted vdids of a device type.
     *
     * Get whitelisted vdids of a device type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWhitelistTest() throws ApiException {
        String dtid = null;
        Integer count = null;
        Integer offset = null;
        WhitelistResultEnvelope response = api.getWhitelist(dtid, count, offset);

        // TODO: test validations
    }
    
    /**
     * Get whitelist certificate of device type.
     *
     * Get whitelist certificate of device type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWhitelistCertificateTest() throws ApiException {
        String dtid = null;
        CertificateEnvelope response = api.getWhitelistCertificate(dtid);

        // TODO: test validations
    }
    
    /**
     * Get the status of whitelist feature (enabled/disabled) of a device type.
     *
     * Get the status of whitelist feature (enabled/disabled) of a device type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWhitelistStatusTest() throws ApiException {
        String dtid = null;
        WhitelistEnvelope response = api.getWhitelistStatus(dtid);

        // TODO: test validations
    }
    
    /**
     * Upload a CSV file related to the Device Type.
     *
     * Upload a CSV file related to the Device Type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadCSVTest() throws ApiException {
        String dtid = null;
        byte[] file = null;
        UploadIdEnvelope response = api.uploadCSV(dtid, file);

        // TODO: test validations
    }
    
}
