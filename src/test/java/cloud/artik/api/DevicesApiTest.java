/*
 * ARTIK Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cloud.artik.api;

import cloud.artik.client.ApiException;
import cloud.artik.model.Device;
import cloud.artik.model.DeviceEnvelope;
import cloud.artik.model.DeviceTokenEnvelope;
import cloud.artik.model.PresenceEnvelope;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DevicesApi
 */
@Ignore
public class DevicesApiTest {

    private final DevicesApi api = new DevicesApi();

    
    /**
     * Add Device
     *
     * Create a device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addDeviceTest() throws ApiException {
        Device device = null;
        DeviceEnvelope response = api.addDevice(device);

        // TODO: test validations
    }
    
    /**
     * Delete Device
     *
     * Deletes a device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDeviceTest() throws ApiException {
        String deviceId = null;
        DeviceEnvelope response = api.deleteDevice(deviceId);

        // TODO: test validations
    }
    
    /**
     * Delete Device Token
     *
     * Deletes a device&#39;s token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDeviceTokenTest() throws ApiException {
        String deviceId = null;
        DeviceTokenEnvelope response = api.deleteDeviceToken(deviceId);

        // TODO: test validations
    }
    
    /**
     * Get Device
     *
     * Retrieves a device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeviceTest() throws ApiException {
        String deviceId = null;
        DeviceEnvelope response = api.getDevice(deviceId);

        // TODO: test validations
    }
    
    /**
     * Get device presence information
     *
     * Return the presence status of the given device along with the time it was last seen
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDevicePresenceTest() throws ApiException {
        String deviceId = null;
        PresenceEnvelope response = api.getDevicePresence(deviceId);

        // TODO: test validations
    }
    
    /**
     * Get Device Token
     *
     * Retrieves a device&#39;s token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDeviceTokenTest() throws ApiException {
        String deviceId = null;
        DeviceTokenEnvelope response = api.getDeviceToken(deviceId);

        // TODO: test validations
    }
    
    /**
     * Update Device
     *
     * Updates a device
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDeviceTest() throws ApiException {
        String deviceId = null;
        Device device = null;
        DeviceEnvelope response = api.updateDevice(deviceId, device);

        // TODO: test validations
    }
    
    /**
     * Update Device Token
     *
     * Updates a device&#39;s token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDeviceTokenTest() throws ApiException {
        String deviceId = null;
        DeviceTokenEnvelope response = api.updateDeviceToken(deviceId);

        // TODO: test validations
    }
    
}
