/*
 * ARTIK Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cloud.artik.api;

import cloud.artik.client.ApiCallback;
import cloud.artik.client.ApiClient;
import cloud.artik.client.ApiException;
import cloud.artik.client.ApiResponse;
import cloud.artik.client.Configuration;
import cloud.artik.client.Pair;
import cloud.artik.client.ProgressRequestBody;
import cloud.artik.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloud.artik.model.DeviceShareInfo;
import cloud.artik.model.DeviceSharing;
import cloud.artik.model.DeviceSharingEnvelope;
import cloud.artik.model.DeviceSharingId;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DevicesSharesApi {
    private ApiClient apiClient;

    public DevicesSharesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DevicesSharesApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createShareForDevice */
    private com.squareup.okhttp.Call createShareForDeviceCall(String deviceId, DeviceShareInfo deviceShareInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deviceShareInfo;
        
        // create path and map variables
        String localVarPath = "in/api/devices/{deviceId}/shares".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "artikcloud_oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call createShareForDeviceValidateBeforeCall(String deviceId, DeviceShareInfo deviceShareInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling createShareForDevice(Async)");
        }
        
        // verify the required parameter 'deviceShareInfo' is set
        if (deviceShareInfo == null) {
            throw new ApiException("Missing the required parameter 'deviceShareInfo' when calling createShareForDevice(Async)");
        }
        
        
        com.squareup.okhttp.Call call = createShareForDeviceCall(deviceId, deviceShareInfo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Share a device 
     * Share a device 
     * @param deviceId Device ID. (required)
     * @param deviceShareInfo Device object that needs to be added (required)
     * @return DeviceSharingId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceSharingId createShareForDevice(String deviceId, DeviceShareInfo deviceShareInfo) throws ApiException {
        ApiResponse<DeviceSharingId> resp = createShareForDeviceWithHttpInfo(deviceId, deviceShareInfo);
        return resp.getData();
    }

    /**
     * Share a device 
     * Share a device 
     * @param deviceId Device ID. (required)
     * @param deviceShareInfo Device object that needs to be added (required)
     * @return ApiResponse&lt;DeviceSharingId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceSharingId> createShareForDeviceWithHttpInfo(String deviceId, DeviceShareInfo deviceShareInfo) throws ApiException {
        com.squareup.okhttp.Call call = createShareForDeviceValidateBeforeCall(deviceId, deviceShareInfo, null, null);
        Type localVarReturnType = new TypeToken<DeviceSharingId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Share a device  (asynchronously)
     * Share a device 
     * @param deviceId Device ID. (required)
     * @param deviceShareInfo Device object that needs to be added (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createShareForDeviceAsync(String deviceId, DeviceShareInfo deviceShareInfo, final ApiCallback<DeviceSharingId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createShareForDeviceValidateBeforeCall(deviceId, deviceShareInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceSharingId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteSharingForDevice */
    private com.squareup.okhttp.Call deleteSharingForDeviceCall(String deviceId, String shareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "in/api/devices/{deviceId}/shares/{shareId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()))
        .replaceAll("\\{" + "shareId" + "\\}", apiClient.escapeString(shareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "artikcloud_oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteSharingForDeviceValidateBeforeCall(String deviceId, String shareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling deleteSharingForDevice(Async)");
        }
        
        // verify the required parameter 'shareId' is set
        if (shareId == null) {
            throw new ApiException("Missing the required parameter 'shareId' when calling deleteSharingForDevice(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteSharingForDeviceCall(deviceId, shareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete specific share of the given device id
     * Delete specific share of the given device id
     * @param deviceId Device ID. (required)
     * @param shareId Share ID. (required)
     * @return DeviceSharingId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceSharingId deleteSharingForDevice(String deviceId, String shareId) throws ApiException {
        ApiResponse<DeviceSharingId> resp = deleteSharingForDeviceWithHttpInfo(deviceId, shareId);
        return resp.getData();
    }

    /**
     * Delete specific share of the given device id
     * Delete specific share of the given device id
     * @param deviceId Device ID. (required)
     * @param shareId Share ID. (required)
     * @return ApiResponse&lt;DeviceSharingId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceSharingId> deleteSharingForDeviceWithHttpInfo(String deviceId, String shareId) throws ApiException {
        com.squareup.okhttp.Call call = deleteSharingForDeviceValidateBeforeCall(deviceId, shareId, null, null);
        Type localVarReturnType = new TypeToken<DeviceSharingId>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete specific share of the given device id (asynchronously)
     * Delete specific share of the given device id
     * @param deviceId Device ID. (required)
     * @param shareId Share ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteSharingForDeviceAsync(String deviceId, String shareId, final ApiCallback<DeviceSharingId> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteSharingForDeviceValidateBeforeCall(deviceId, shareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceSharingId>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getAllSharesForDevice */
    private com.squareup.okhttp.Call getAllSharesForDeviceCall(String deviceId, Integer count, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "in/api/devices/{deviceId}/shares".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "artikcloud_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAllSharesForDeviceValidateBeforeCall(String deviceId, Integer count, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getAllSharesForDevice(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAllSharesForDeviceCall(deviceId, count, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List all shares for the given device id
     * List all shares for the given device id
     * @param deviceId Device ID. (required)
     * @param count Desired count of items in the result set. (optional)
     * @param offset Offset for pagination. (optional)
     * @return DeviceSharingEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceSharingEnvelope getAllSharesForDevice(String deviceId, Integer count, Integer offset) throws ApiException {
        ApiResponse<DeviceSharingEnvelope> resp = getAllSharesForDeviceWithHttpInfo(deviceId, count, offset);
        return resp.getData();
    }

    /**
     * List all shares for the given device id
     * List all shares for the given device id
     * @param deviceId Device ID. (required)
     * @param count Desired count of items in the result set. (optional)
     * @param offset Offset for pagination. (optional)
     * @return ApiResponse&lt;DeviceSharingEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceSharingEnvelope> getAllSharesForDeviceWithHttpInfo(String deviceId, Integer count, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getAllSharesForDeviceValidateBeforeCall(deviceId, count, offset, null, null);
        Type localVarReturnType = new TypeToken<DeviceSharingEnvelope>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all shares for the given device id (asynchronously)
     * List all shares for the given device id
     * @param deviceId Device ID. (required)
     * @param count Desired count of items in the result set. (optional)
     * @param offset Offset for pagination. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAllSharesForDeviceAsync(String deviceId, Integer count, Integer offset, final ApiCallback<DeviceSharingEnvelope> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAllSharesForDeviceValidateBeforeCall(deviceId, count, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceSharingEnvelope>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getSharingForDevice */
    private com.squareup.okhttp.Call getSharingForDeviceCall(String deviceId, String shareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "in/api/devices/{deviceId}/shares/{shareId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "deviceId" + "\\}", apiClient.escapeString(deviceId.toString()))
        .replaceAll("\\{" + "shareId" + "\\}", apiClient.escapeString(shareId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "artikcloud_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getSharingForDeviceValidateBeforeCall(String deviceId, String shareId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling getSharingForDevice(Async)");
        }
        
        // verify the required parameter 'shareId' is set
        if (shareId == null) {
            throw new ApiException("Missing the required parameter 'shareId' when calling getSharingForDevice(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getSharingForDeviceCall(deviceId, shareId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get specific share of the given device id
     * Get specific share of the given device id
     * @param deviceId Device ID. (required)
     * @param shareId Share ID. (required)
     * @return DeviceSharing
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DeviceSharing getSharingForDevice(String deviceId, String shareId) throws ApiException {
        ApiResponse<DeviceSharing> resp = getSharingForDeviceWithHttpInfo(deviceId, shareId);
        return resp.getData();
    }

    /**
     * Get specific share of the given device id
     * Get specific share of the given device id
     * @param deviceId Device ID. (required)
     * @param shareId Share ID. (required)
     * @return ApiResponse&lt;DeviceSharing&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DeviceSharing> getSharingForDeviceWithHttpInfo(String deviceId, String shareId) throws ApiException {
        com.squareup.okhttp.Call call = getSharingForDeviceValidateBeforeCall(deviceId, shareId, null, null);
        Type localVarReturnType = new TypeToken<DeviceSharing>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get specific share of the given device id (asynchronously)
     * Get specific share of the given device id
     * @param deviceId Device ID. (required)
     * @param shareId Share ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getSharingForDeviceAsync(String deviceId, String shareId, final ApiCallback<DeviceSharing> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getSharingForDeviceValidateBeforeCall(deviceId, shareId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DeviceSharing>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
