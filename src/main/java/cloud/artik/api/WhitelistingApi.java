/*
 * ARTIK Cloud API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package cloud.artik.api;

import cloud.artik.client.ApiCallback;
import cloud.artik.client.ApiClient;
import cloud.artik.client.ApiException;
import cloud.artik.client.ApiResponse;
import cloud.artik.client.Configuration;
import cloud.artik.client.Pair;
import cloud.artik.client.ProgressRequestBody;
import cloud.artik.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import cloud.artik.model.CertificateEnvelope;
import cloud.artik.model.DeviceTypeUpdateInput;
import cloud.artik.model.RejectedCSVRowsEnvelope;
import cloud.artik.model.UploadIdEnvelope;
import cloud.artik.model.UploadStatusEnvelope;
import cloud.artik.model.WhitelistEnvelope;
import cloud.artik.model.WhitelistResultEnvelope;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WhitelistingApi {
    private ApiClient apiClient;

    public WhitelistingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WhitelistingApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteVdid */
    private com.squareup.okhttp.Call deleteVdidCall(String dtid, String vdid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/devicetypes/{dtid}/whitelist/{vdid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "dtid" + "\\}", apiClient.escapeString(dtid.toString()))
        .replaceAll("\\{" + "vdid" + "\\}", apiClient.escapeString(vdid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "artikcloud_oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteVdidValidateBeforeCall(String dtid, String vdid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dtid' is set
        if (dtid == null) {
            throw new ApiException("Missing the required parameter 'dtid' when calling deleteVdid(Async)");
        }
        
        // verify the required parameter 'vdid' is set
        if (vdid == null) {
            throw new ApiException("Missing the required parameter 'vdid' when calling deleteVdid(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteVdidCall(dtid, vdid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a vdid from the devicetype whitelist.
     * Delete a vdid from the devicetype whitelist.
     * @param dtid Device Type ID. (required)
     * @param vdid Vendor Device ID. (required)
     * @return WhitelistEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WhitelistEnvelope deleteVdid(String dtid, String vdid) throws ApiException {
        ApiResponse<WhitelistEnvelope> resp = deleteVdidWithHttpInfo(dtid, vdid);
        return resp.getData();
    }

    /**
     * Delete a vdid from the devicetype whitelist.
     * Delete a vdid from the devicetype whitelist.
     * @param dtid Device Type ID. (required)
     * @param vdid Vendor Device ID. (required)
     * @return ApiResponse&lt;WhitelistEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WhitelistEnvelope> deleteVdidWithHttpInfo(String dtid, String vdid) throws ApiException {
        com.squareup.okhttp.Call call = deleteVdidValidateBeforeCall(dtid, vdid, null, null);
        Type localVarReturnType = new TypeToken<WhitelistEnvelope>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a vdid from the devicetype whitelist. (asynchronously)
     * Delete a vdid from the devicetype whitelist.
     * @param dtid Device Type ID. (required)
     * @param vdid Vendor Device ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteVdidAsync(String dtid, String vdid, final ApiCallback<WhitelistEnvelope> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteVdidValidateBeforeCall(dtid, vdid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WhitelistEnvelope>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for deleteWhitelistCertificate */
    private com.squareup.okhttp.Call deleteWhitelistCertificateCall(String dtid, String cid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/devicetypes/{dtid}/whitelist/certificates/{cid}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "dtid" + "\\}", apiClient.escapeString(dtid.toString()))
        .replaceAll("\\{" + "cid" + "\\}", apiClient.escapeString(cid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "artikcloud_oauth" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteWhitelistCertificateValidateBeforeCall(String dtid, String cid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dtid' is set
        if (dtid == null) {
            throw new ApiException("Missing the required parameter 'dtid' when calling deleteWhitelistCertificate(Async)");
        }
        
        // verify the required parameter 'cid' is set
        if (cid == null) {
            throw new ApiException("Missing the required parameter 'cid' when calling deleteWhitelistCertificate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteWhitelistCertificateCall(dtid, cid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete a whitelist certificate associated with a devicetype.
     * Delete a whitelist certificate associated with a devicetype.
     * @param dtid Device Type ID. (required)
     * @param cid Certificate ID. (required)
     * @return WhitelistEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WhitelistEnvelope deleteWhitelistCertificate(String dtid, String cid) throws ApiException {
        ApiResponse<WhitelistEnvelope> resp = deleteWhitelistCertificateWithHttpInfo(dtid, cid);
        return resp.getData();
    }

    /**
     * Delete a whitelist certificate associated with a devicetype.
     * Delete a whitelist certificate associated with a devicetype.
     * @param dtid Device Type ID. (required)
     * @param cid Certificate ID. (required)
     * @return ApiResponse&lt;WhitelistEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WhitelistEnvelope> deleteWhitelistCertificateWithHttpInfo(String dtid, String cid) throws ApiException {
        com.squareup.okhttp.Call call = deleteWhitelistCertificateValidateBeforeCall(dtid, cid, null, null);
        Type localVarReturnType = new TypeToken<WhitelistEnvelope>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete a whitelist certificate associated with a devicetype. (asynchronously)
     * Delete a whitelist certificate associated with a devicetype.
     * @param dtid Device Type ID. (required)
     * @param cid Certificate ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteWhitelistCertificateAsync(String dtid, String cid, final ApiCallback<WhitelistEnvelope> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteWhitelistCertificateValidateBeforeCall(dtid, cid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WhitelistEnvelope>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for enableWhitelist */
    private com.squareup.okhttp.Call enableWhitelistCall(String dtid, DeviceTypeUpdateInput deviceTypeUpdateInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = deviceTypeUpdateInfo;
        
        // create path and map variables
        String localVarPath = "/devicetypes/:dtid/whitelist/enable".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "dtid" + "\\}", apiClient.escapeString(dtid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "artikcloud_oauth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call enableWhitelistValidateBeforeCall(String dtid, DeviceTypeUpdateInput deviceTypeUpdateInfo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dtid' is set
        if (dtid == null) {
            throw new ApiException("Missing the required parameter 'dtid' when calling enableWhitelist(Async)");
        }
        
        // verify the required parameter 'deviceTypeUpdateInfo' is set
        if (deviceTypeUpdateInfo == null) {
            throw new ApiException("Missing the required parameter 'deviceTypeUpdateInfo' when calling enableWhitelist(Async)");
        }
        
        
        com.squareup.okhttp.Call call = enableWhitelistCall(dtid, deviceTypeUpdateInfo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Enable or disble whitelist feature of a device type
     * Enable or disble whitelist feature of a device type
     * @param dtid Device Type ID. (required)
     * @param deviceTypeUpdateInfo Device type update input. (required)
     * @return WhitelistEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WhitelistEnvelope enableWhitelist(String dtid, DeviceTypeUpdateInput deviceTypeUpdateInfo) throws ApiException {
        ApiResponse<WhitelistEnvelope> resp = enableWhitelistWithHttpInfo(dtid, deviceTypeUpdateInfo);
        return resp.getData();
    }

    /**
     * Enable or disble whitelist feature of a device type
     * Enable or disble whitelist feature of a device type
     * @param dtid Device Type ID. (required)
     * @param deviceTypeUpdateInfo Device type update input. (required)
     * @return ApiResponse&lt;WhitelistEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WhitelistEnvelope> enableWhitelistWithHttpInfo(String dtid, DeviceTypeUpdateInput deviceTypeUpdateInfo) throws ApiException {
        com.squareup.okhttp.Call call = enableWhitelistValidateBeforeCall(dtid, deviceTypeUpdateInfo, null, null);
        Type localVarReturnType = new TypeToken<WhitelistEnvelope>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Enable or disble whitelist feature of a device type (asynchronously)
     * Enable or disble whitelist feature of a device type
     * @param dtid Device Type ID. (required)
     * @param deviceTypeUpdateInfo Device type update input. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call enableWhitelistAsync(String dtid, DeviceTypeUpdateInput deviceTypeUpdateInfo, final ApiCallback<WhitelistEnvelope> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = enableWhitelistValidateBeforeCall(dtid, deviceTypeUpdateInfo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WhitelistEnvelope>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getRejectedRowList */
    private com.squareup.okhttp.Call getRejectedRowListCall(String dtid, String uploadId, Integer count, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/devicetypes/{dtid}/whitelist/{uploadId}/rejectedRows".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "dtid" + "\\}", apiClient.escapeString(dtid.toString()))
        .replaceAll("\\{" + "uploadId" + "\\}", apiClient.escapeString(uploadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "artikcloud_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getRejectedRowListValidateBeforeCall(String dtid, String uploadId, Integer count, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dtid' is set
        if (dtid == null) {
            throw new ApiException("Missing the required parameter 'dtid' when calling getRejectedRowList(Async)");
        }
        
        // verify the required parameter 'uploadId' is set
        if (uploadId == null) {
            throw new ApiException("Missing the required parameter 'uploadId' when calling getRejectedRowList(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getRejectedRowListCall(dtid, uploadId, count, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the list of rejected rows for an uploaded CSV file.
     * Get the list of rejected rows for an uploaded CSV file.
     * @param dtid Device type id related to the uploaded CSV file. (required)
     * @param uploadId Upload id related to the uploaded CSV file. (required)
     * @param count Max results count. (optional)
     * @param offset Result starting offset. (optional)
     * @return RejectedCSVRowsEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RejectedCSVRowsEnvelope getRejectedRowList(String dtid, String uploadId, Integer count, Integer offset) throws ApiException {
        ApiResponse<RejectedCSVRowsEnvelope> resp = getRejectedRowListWithHttpInfo(dtid, uploadId, count, offset);
        return resp.getData();
    }

    /**
     * Get the list of rejected rows for an uploaded CSV file.
     * Get the list of rejected rows for an uploaded CSV file.
     * @param dtid Device type id related to the uploaded CSV file. (required)
     * @param uploadId Upload id related to the uploaded CSV file. (required)
     * @param count Max results count. (optional)
     * @param offset Result starting offset. (optional)
     * @return ApiResponse&lt;RejectedCSVRowsEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RejectedCSVRowsEnvelope> getRejectedRowListWithHttpInfo(String dtid, String uploadId, Integer count, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getRejectedRowListValidateBeforeCall(dtid, uploadId, count, offset, null, null);
        Type localVarReturnType = new TypeToken<RejectedCSVRowsEnvelope>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the list of rejected rows for an uploaded CSV file. (asynchronously)
     * Get the list of rejected rows for an uploaded CSV file.
     * @param dtid Device type id related to the uploaded CSV file. (required)
     * @param uploadId Upload id related to the uploaded CSV file. (required)
     * @param count Max results count. (optional)
     * @param offset Result starting offset. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getRejectedRowListAsync(String dtid, String uploadId, Integer count, Integer offset, final ApiCallback<RejectedCSVRowsEnvelope> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getRejectedRowListValidateBeforeCall(dtid, uploadId, count, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RejectedCSVRowsEnvelope>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getUploadStatus */
    private com.squareup.okhttp.Call getUploadStatusCall(String dtid, String uploadId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/devicetypes/{dtid}/whitelist/{uploadId}/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "dtid" + "\\}", apiClient.escapeString(dtid.toString()))
        .replaceAll("\\{" + "uploadId" + "\\}", apiClient.escapeString(uploadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "artikcloud_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUploadStatusValidateBeforeCall(String dtid, String uploadId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dtid' is set
        if (dtid == null) {
            throw new ApiException("Missing the required parameter 'dtid' when calling getUploadStatus(Async)");
        }
        
        // verify the required parameter 'uploadId' is set
        if (uploadId == null) {
            throw new ApiException("Missing the required parameter 'uploadId' when calling getUploadStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUploadStatusCall(dtid, uploadId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the status of a uploaded CSV file.
     * Get the status of a uploaded CSV file.
     * @param dtid Device type id related to the uploaded CSV file. (required)
     * @param uploadId Upload id related to the uploaded CSV file. (required)
     * @return UploadStatusEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UploadStatusEnvelope getUploadStatus(String dtid, String uploadId) throws ApiException {
        ApiResponse<UploadStatusEnvelope> resp = getUploadStatusWithHttpInfo(dtid, uploadId);
        return resp.getData();
    }

    /**
     * Get the status of a uploaded CSV file.
     * Get the status of a uploaded CSV file.
     * @param dtid Device type id related to the uploaded CSV file. (required)
     * @param uploadId Upload id related to the uploaded CSV file. (required)
     * @return ApiResponse&lt;UploadStatusEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UploadStatusEnvelope> getUploadStatusWithHttpInfo(String dtid, String uploadId) throws ApiException {
        com.squareup.okhttp.Call call = getUploadStatusValidateBeforeCall(dtid, uploadId, null, null);
        Type localVarReturnType = new TypeToken<UploadStatusEnvelope>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the status of a uploaded CSV file. (asynchronously)
     * Get the status of a uploaded CSV file.
     * @param dtid Device type id related to the uploaded CSV file. (required)
     * @param uploadId Upload id related to the uploaded CSV file. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUploadStatusAsync(String dtid, String uploadId, final ApiCallback<UploadStatusEnvelope> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUploadStatusValidateBeforeCall(dtid, uploadId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UploadStatusEnvelope>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getWhitelist */
    private com.squareup.okhttp.Call getWhitelistCall(String dtid, Integer count, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/devicetypes/{dtid}/whitelist".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "dtid" + "\\}", apiClient.escapeString(dtid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (count != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "count", count));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "artikcloud_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWhitelistValidateBeforeCall(String dtid, Integer count, Integer offset, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dtid' is set
        if (dtid == null) {
            throw new ApiException("Missing the required parameter 'dtid' when calling getWhitelist(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getWhitelistCall(dtid, count, offset, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get whitelisted vdids of a device type.
     * Get whitelisted vdids of a device type.
     * @param dtid Device Type ID. (required)
     * @param count Max results count. (optional)
     * @param offset Result starting offset. (optional)
     * @return WhitelistResultEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WhitelistResultEnvelope getWhitelist(String dtid, Integer count, Integer offset) throws ApiException {
        ApiResponse<WhitelistResultEnvelope> resp = getWhitelistWithHttpInfo(dtid, count, offset);
        return resp.getData();
    }

    /**
     * Get whitelisted vdids of a device type.
     * Get whitelisted vdids of a device type.
     * @param dtid Device Type ID. (required)
     * @param count Max results count. (optional)
     * @param offset Result starting offset. (optional)
     * @return ApiResponse&lt;WhitelistResultEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WhitelistResultEnvelope> getWhitelistWithHttpInfo(String dtid, Integer count, Integer offset) throws ApiException {
        com.squareup.okhttp.Call call = getWhitelistValidateBeforeCall(dtid, count, offset, null, null);
        Type localVarReturnType = new TypeToken<WhitelistResultEnvelope>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get whitelisted vdids of a device type. (asynchronously)
     * Get whitelisted vdids of a device type.
     * @param dtid Device Type ID. (required)
     * @param count Max results count. (optional)
     * @param offset Result starting offset. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWhitelistAsync(String dtid, Integer count, Integer offset, final ApiCallback<WhitelistResultEnvelope> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWhitelistValidateBeforeCall(dtid, count, offset, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WhitelistResultEnvelope>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getWhitelistCertificate */
    private com.squareup.okhttp.Call getWhitelistCertificateCall(String dtid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/devicetypes/{dtid}/whitelist/certificates".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "dtid" + "\\}", apiClient.escapeString(dtid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "artikcloud_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWhitelistCertificateValidateBeforeCall(String dtid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dtid' is set
        if (dtid == null) {
            throw new ApiException("Missing the required parameter 'dtid' when calling getWhitelistCertificate(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getWhitelistCertificateCall(dtid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get whitelist certificate of device type.
     * Get whitelist certificate of device type.
     * @param dtid Device Type ID. (required)
     * @return CertificateEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CertificateEnvelope getWhitelistCertificate(String dtid) throws ApiException {
        ApiResponse<CertificateEnvelope> resp = getWhitelistCertificateWithHttpInfo(dtid);
        return resp.getData();
    }

    /**
     * Get whitelist certificate of device type.
     * Get whitelist certificate of device type.
     * @param dtid Device Type ID. (required)
     * @return ApiResponse&lt;CertificateEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CertificateEnvelope> getWhitelistCertificateWithHttpInfo(String dtid) throws ApiException {
        com.squareup.okhttp.Call call = getWhitelistCertificateValidateBeforeCall(dtid, null, null);
        Type localVarReturnType = new TypeToken<CertificateEnvelope>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get whitelist certificate of device type. (asynchronously)
     * Get whitelist certificate of device type.
     * @param dtid Device Type ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWhitelistCertificateAsync(String dtid, final ApiCallback<CertificateEnvelope> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWhitelistCertificateValidateBeforeCall(dtid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CertificateEnvelope>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getWhitelistStatus */
    private com.squareup.okhttp.Call getWhitelistStatusCall(String dtid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/devicetypes/{dtid}/whitelist/status".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "dtid" + "\\}", apiClient.escapeString(dtid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "artikcloud_oauth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getWhitelistStatusValidateBeforeCall(String dtid, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dtid' is set
        if (dtid == null) {
            throw new ApiException("Missing the required parameter 'dtid' when calling getWhitelistStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getWhitelistStatusCall(dtid, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the status of whitelist feature (enabled/disabled) of a device type.
     * Get the status of whitelist feature (enabled/disabled) of a device type.
     * @param dtid Device Type ID. (required)
     * @return WhitelistEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public WhitelistEnvelope getWhitelistStatus(String dtid) throws ApiException {
        ApiResponse<WhitelistEnvelope> resp = getWhitelistStatusWithHttpInfo(dtid);
        return resp.getData();
    }

    /**
     * Get the status of whitelist feature (enabled/disabled) of a device type.
     * Get the status of whitelist feature (enabled/disabled) of a device type.
     * @param dtid Device Type ID. (required)
     * @return ApiResponse&lt;WhitelistEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<WhitelistEnvelope> getWhitelistStatusWithHttpInfo(String dtid) throws ApiException {
        com.squareup.okhttp.Call call = getWhitelistStatusValidateBeforeCall(dtid, null, null);
        Type localVarReturnType = new TypeToken<WhitelistEnvelope>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the status of whitelist feature (enabled/disabled) of a device type. (asynchronously)
     * Get the status of whitelist feature (enabled/disabled) of a device type.
     * @param dtid Device Type ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getWhitelistStatusAsync(String dtid, final ApiCallback<WhitelistEnvelope> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getWhitelistStatusValidateBeforeCall(dtid, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<WhitelistEnvelope>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for uploadCSV */
    private com.squareup.okhttp.Call uploadCSVCall(String dtid, byte[] file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = file;
        
        // create path and map variables
        String localVarPath = "/devicetypes/{dtid}/whitelist".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "dtid" + "\\}", apiClient.escapeString(dtid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "artikcloud_oauth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadCSVValidateBeforeCall(String dtid, byte[] file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'dtid' is set
        if (dtid == null) {
            throw new ApiException("Missing the required parameter 'dtid' when calling uploadCSV(Async)");
        }
        
        // verify the required parameter 'file' is set
        if (file == null) {
            throw new ApiException("Missing the required parameter 'file' when calling uploadCSV(Async)");
        }
        
        
        com.squareup.okhttp.Call call = uploadCSVCall(dtid, file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload a CSV file related to the Device Type.
     * Upload a CSV file related to the Device Type.
     * @param dtid Device Type ID. (required)
     * @param file Device Type ID. (required)
     * @return UploadIdEnvelope
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UploadIdEnvelope uploadCSV(String dtid, byte[] file) throws ApiException {
        ApiResponse<UploadIdEnvelope> resp = uploadCSVWithHttpInfo(dtid, file);
        return resp.getData();
    }

    /**
     * Upload a CSV file related to the Device Type.
     * Upload a CSV file related to the Device Type.
     * @param dtid Device Type ID. (required)
     * @param file Device Type ID. (required)
     * @return ApiResponse&lt;UploadIdEnvelope&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UploadIdEnvelope> uploadCSVWithHttpInfo(String dtid, byte[] file) throws ApiException {
        com.squareup.okhttp.Call call = uploadCSVValidateBeforeCall(dtid, file, null, null);
        Type localVarReturnType = new TypeToken<UploadIdEnvelope>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload a CSV file related to the Device Type. (asynchronously)
     * Upload a CSV file related to the Device Type.
     * @param dtid Device Type ID. (required)
     * @param file Device Type ID. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadCSVAsync(String dtid, byte[] file, final ApiCallback<UploadIdEnvelope> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadCSVValidateBeforeCall(dtid, file, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UploadIdEnvelope>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
